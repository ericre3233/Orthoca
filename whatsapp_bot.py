#!/usr/bin/env python3
"""
WhatsApp Chatbot for Cl√≠nica Ortomolecular
Uses OpenRouter API for intelligent responses
"""

import os
import json
import requests
from flask import Flask, request, jsonify
from datetime import datetime
import logging

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

class WhatsAppBot:
    def __init__(self):
        self.openai_api_key = os.environ.get('OPENAI_API_KEY')
        self.database_url = os.environ.get('DATABASE_URL')
        
    def get_ai_response(self, message, phone_number):
        """Get AI response using OpenAI API"""
        try:
            from openai import OpenAI
            client = OpenAI(api_key=self.openai_api_key)
            
            response = client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {
                        "role": "system",
                        "content": """Voc√™ √© o assistente virtual da Cl√≠nica Ortomolecular via WhatsApp.

Suas responsabilidades:
- Responder perguntas sobre medicina ortomolecular, suplementos e sa√∫de
- Fornecer informa√ß√µes sobre hor√°rios, agendamentos e servi√ßos
- Orientar sobre tratamentos ortomoleculares de forma educativa
- Ser emp√°tico, profissional e conciso (WhatsApp)

Informa√ß√µes da cl√≠nica:
- Hor√°rio: Segunda a sexta 8h-18h, s√°bados 8h-12h
- Telefone: (11) 3456-7890
- WhatsApp: (11) 99999-9999
- Email: contato@clinicaortomolecular.com.br
- Especialistas: Dr. Jo√£o Silva (CRM-SP 123456), Dra. Maria Santos (CRM-SP 789012)

Tratamentos oferecidos:
- Medicina Ortomolecular
- Nutrologia
- Prescri√ß√£o de suplementos personalizados
- An√°lise de exames laboratoriais espec√≠ficos
- Acompanhamento nutricional

IMPORTANTE: 
- Respostas devem ser concisas para WhatsApp
- Sempre recomende consulta m√©dica para diagn√≥sticos
- Para agendamentos, direcione para o telefone da cl√≠nica
- Seja educativo sobre medicina ortomolecular"""
                    },
                    {
                        "role": "user", 
                        "content": message
                    }
                ],
                temperature=0.7,
                max_tokens=300  # Shorter responses for WhatsApp
            )
            
            return response.choices[0].message.content
            
        except Exception as e:
            logger.error(f"OpenAI API error: {str(e)}")
            return self.get_fallback_response(message)
    
    def get_fallback_response(self, message):
        """Fallback responses when AI is unavailable"""
        message_lower = message.lower()
        
        if any(word in message_lower for word in ['oi', 'ol√°', 'ola', 'bom dia', 'boa tarde', 'boa noite']):
            return """Ol√°! üëã 
Bem-vindo √† Cl√≠nica Ortomolecular!

Sou seu assistente virtual. Posso ajudar com:
‚Ä¢ Informa√ß√µes sobre tratamentos
‚Ä¢ Hor√°rios de atendimento  
‚Ä¢ Orienta√ß√µes sobre medicina ortomolecular

Como posso ajud√°-lo hoje?"""

        elif any(word in message_lower for word in ['hor√°rio', 'horario', 'atendimento', 'funciona']):
            return """üïê *Hor√°rios de Atendimento:*

Segunda a Sexta: 8h √†s 18h
S√°bados: 8h √†s 12h

üìû Para agendamentos: (11) 3456-7890
üí¨ WhatsApp: (11) 99999-9999"""

        elif any(word in message_lower for word in ['agendar', 'consulta', 'marcar', 'agendamento']):
            return """üìÖ *Agendamento de Consultas:*

Para agendar sua consulta:
üìû Ligue: (11) 3456-7890  
üí¨ WhatsApp: (11) 99999-9999

‚è∞ Hor√°rios dispon√≠veis:
‚Ä¢ Segunda a sexta: 8h √†s 18h
‚Ä¢ S√°bados: 8h √†s 12h

Nossa equipe ter√° prazer em atend√™-lo!"""

        elif any(word in message_lower for word in ['ortomolecular', 'medicina', 'tratamento']):
            return """üß¨ *Medicina Ortomolecular:*

A medicina ortomolecular busca o equil√≠brio do organismo atrav√©s de:

‚úÖ Corre√ß√£o de defici√™ncias nutricionais
‚úÖ Suplementa√ß√£o personalizada
‚úÖ Vitaminas, minerais e amino√°cidos
‚úÖ An√°lise de exames espec√≠ficos

üë®‚Äç‚öïÔ∏è Nossos especialistas:
‚Ä¢ Dr. Jo√£o Silva - Medicina Ortomolecular
‚Ä¢ Dra. Maria Santos - Nutrologia

Agende sua consulta: (11) 3456-7890"""

        elif any(word in message_lower for word in ['contato', 'telefone', 'email']):
            return """üìû *Nossos Contatos:*

üè• Cl√≠nica Ortomolecular
üìû Telefone: (11) 3456-7890
üí¨ WhatsApp: (11) 99999-9999  
üìß Email: contato@clinicaortomolecular.com.br

‚è∞ Atendimento:
Segunda a sexta: 8h-18h
S√°bados: 8h-12h"""

        elif any(word in message_lower for word in ['pre√ßo', 'valor', 'custo', 'quanto custa']):
            return """üí∞ *Valores de Consultas:*

Os valores variam conforme o tipo de atendimento e tratamento.

üìû Para informa√ß√µes detalhadas sobre valores:
Ligue: (11) 3456-7890
üí¨ WhatsApp: (11) 99999-9999

Nossa equipe fornecer√° todas as informa√ß√µes sobre investimento em sua sa√∫de! üåü"""

        elif any(word in message_lower for word in ['exame', 'laboratorio', 'an√°lise']):
            return """üî¨ *Exames Laboratoriais:*

Solicitamos exames espec√≠ficos conforme cada caso:

ü©∏ Exames de sangue completos
üß™ Vitaminas e minerais  
üß¨ Marcadores metab√≥licos
‚öñÔ∏è Perfil hormonal
üõ°Ô∏è Sistema imunol√≥gico

Os exames podem ser realizados em laborat√≥rios conveniados.

Agende sua consulta: (11) 3456-7890"""

        else:
            return """Obrigado por entrar em contato! üôè

Sou o assistente virtual da Cl√≠nica Ortomolecular. 

Posso ajudar com:
‚Ä¢ Informa√ß√µes sobre tratamentos
‚Ä¢ Hor√°rios e agendamentos  
‚Ä¢ D√∫vidas sobre medicina ortomolecular
‚Ä¢ Contatos da cl√≠nica

Digite sua d√∫vida que terei prazer em ajudar! üòä"""

    def save_conversation(self, phone_number, message, response):
        """Save conversation to database"""
        try:
            # Here you would save to your database
            # For now, we'll log it
            logger.info(f"Conversation saved - Phone: {phone_number}, Message: {message[:50]}...")
        except Exception as e:
            logger.error(f"Error saving conversation: {str(e)}")

# Initialize bot
bot = WhatsAppBot()

@app.route('/webhook', methods=['GET'])
def verify_webhook():
    """Verify webhook for WhatsApp"""
    verify_token = os.environ.get('WHATSAPP_VERIFY_TOKEN', 'clinic_verify_token')
    mode = request.args.get('hub.mode')
    token = request.args.get('hub.verify_token')
    challenge = request.args.get('hub.challenge')
    
    if mode and token:
        if mode == 'subscribe' and token == verify_token:
            logger.info("Webhook verified successfully!")
            return challenge
        else:
            logger.warning("Webhook verification failed!")
            return 'Verification failed', 403
    
    return 'Invalid request', 400

@app.route('/webhook', methods=['POST'])
def handle_webhook():
    """Handle incoming WhatsApp messages"""
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({'status': 'error', 'message': 'No data received'}), 400
            
        # Extract message data (format depends on WhatsApp API provider)
        if 'messages' in data and data['messages']:
            for message_data in data['messages']:
                phone_number = message_data.get('from', '')
                message_text = message_data.get('text', {}).get('body', '')
                message_id = message_data.get('id', '')
                
                if message_text and phone_number:
                    # Get AI response
                    response = bot.get_ai_response(message_text, phone_number)
                    
                    # Save conversation
                    bot.save_conversation(phone_number, message_text, response)
                    
                    # Send response back
                    send_whatsapp_message(phone_number, response)
                    
                    logger.info(f"Processed message from {phone_number}: {message_text[:50]}...")
        
        return jsonify({'status': 'success'}), 200
        
    except Exception as e:
        logger.error(f"Webhook error: {str(e)}")
        return jsonify({'status': 'error', 'message': str(e)}), 500

def send_whatsapp_message(phone_number, message):
    """Send message via WhatsApp API"""
    try:
        # This would integrate with your WhatsApp API provider
        # (Twilio, Meta Business API, etc.)
        
        # Example for generic WhatsApp API:
        api_url = os.environ.get('WHATSAPP_API_URL', 'http://localhost:8001/api/send')
        
        payload = {
            'phone': phone_number,
            'message': message,
            'type': 'text'
        }
        
        headers = {
            'Content-Type': 'application/json',
            'Authorization': f"Bearer {os.environ.get('WHATSAPP_API_TOKEN', '')}"
        }
        
        response = requests.post(api_url, json=payload, headers=headers, timeout=10)
        
        if response.ok:
            logger.info(f"Message sent successfully to {phone_number}")
        else:
            logger.error(f"Failed to send message: {response.status_code} - {response.text}")
            
    except Exception as e:
        logger.error(f"Error sending WhatsApp message: {str(e)}")

@app.route('/send', methods=['POST'])
def send_message():
    """Manual endpoint to send messages"""
    try:
        data = request.get_json()
        phone_number = data.get('phone')
        message = data.get('message')
        
        if not phone_number or not message:
            return jsonify({'error': 'Phone number and message required'}), 400
        
        send_whatsapp_message(phone_number, message)
        return jsonify({'status': 'success', 'message': 'Message sent'})
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/chat', methods=['POST'])
def chat_endpoint():
    """Direct chat endpoint for testing"""
    try:
        data = request.get_json()
        message = data.get('message', '')
        phone = data.get('phone', '5511999999999')
        
        if not message:
            return jsonify({'error': 'Message required'}), 400
        
        response = bot.get_ai_response(message, phone)
        
        return jsonify({
            'response': response,
            'phone': phone,
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"Chat endpoint error: {str(e)}")
        return jsonify({'error': str(e)}), 500

@app.route('/health', methods=['GET'])
def health_check():
    """Health check endpoint"""
    return jsonify({
        'status': 'healthy',
        'service': 'WhatsApp Chatbot',
        'timestamp': datetime.now().isoformat(),
        'openai_configured': bool(os.environ.get('OPENAI_API_KEY'))
    })

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 8001))
    app.run(host='0.0.0.0', port=port, debug=True)