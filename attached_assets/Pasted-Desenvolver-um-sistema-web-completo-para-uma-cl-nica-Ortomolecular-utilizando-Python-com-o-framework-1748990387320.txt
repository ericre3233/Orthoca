Desenvolver um sistema web completo para uma cl√≠nica Ortomolecular utilizando Python com o framework Django, 100% funcional no ambiente Replit, com as seguintes caracter√≠sticas:

üßë‚Äç‚öïÔ∏è 1. Cadastro e Agendamento de Pacientes
Cadastro completo de pacientes com:

Nome

CPF

Data de nascimento

Telefone

E-mail

Hist√≥rico cl√≠nico

Agendamento de consultas com sele√ß√£o de:

M√©dico

Data

Hor√°rio

Visualiza√ß√£o da agenda por:

Dia

Semana

M√™s

Envio autom√°tico de confirma√ß√£o de consulta via API local (ex: OpenRouter ou outro backend local):

A API dever√° ser configurada com uma URL local como http://localhost:8001/api/send usando o m√©todo POST.

O payload da requisi√ß√£o deve conter:

json
Copiar
Editar
{
  "nome": "Maria Silva",
  "contato": "+55 11 91234-5678",
  "email": "maria@example.com",
  "mensagem": "Sua consulta foi agendada para 05/06 √†s 14h.",
  "canal": "whatsapp"
}
üìÅ 2. Prontu√°rio M√©dico
Prontu√°rio eletr√¥nico com:

Anamnese

Sintomas

Diagn√≥stico

Conduta m√©dica

Hist√≥rico de atendimentos por paciente

üíä 3. Prescri√ß√£o M√©dica Ortomolecular
Cria√ß√£o de prescri√ß√£o com:

Campo livre para f√≥rmulas manipuladas

Sele√ß√£o de suplementos do banco de dados

Inser√ß√£o de hemogramas ou outros exames cadastrados

Impress√£o/exporta√ß√£o da prescri√ß√£o em PDF com:

Logotipo da cl√≠nica

Nome e CRM do m√©dico

Assinatura digital e carimbo eletr√¥nico

üì¶ 4. Cadastro de Suplementos e Hemogramas
Cadastro e gerenciamento de:

Suplementos ortomoleculares (nome, categoria, posologia, observa√ß√µes)

Exames laboratoriais (como hemogramas, com nome, valores de refer√™ncia, observa√ß√µes)

Ambos devem estar dispon√≠veis para sele√ß√£o na prescri√ß√£o m√©dica

üí∞ 5. M√≥dulo Financeiro e Recibos
Registro de pagamentos por consulta ou procedimento

Emiss√£o de recibo em PDF com:

Nome do paciente

Valor

Forma de pagamento

Assinatura/carimbo do profissional

Logotipo da cl√≠nica

Relat√≥rios financeiros:

Por profissional

Por per√≠odo

Totais da cl√≠nica

üîê 6. Autentica√ß√£o e Perfis de Usu√°rio
Controle de acesso com permiss√µes por perfil:

Admin

M√©dico

Recepcionista

Financeiro

ü§ñ 7. Chatbot com Intelig√™ncia Artificial (via API local - OpenRouter)
Integra√ß√£o de um chatbot baseado em IA utilizando API local do OpenRouter, com as seguintes funcionalidades:

Objetivo:
Atender pacientes automaticamente com respostas sobre:

Disponibilidade de hor√°rios e agendamentos

Explica√ß√µes sobre tratamentos ortomoleculares

D√∫vidas frequentes sobre servi√ßos, suplementos, exames

Encaminhamento para contato humano, se necess√°rio

Funcionamento:
Backend Django deve enviar e receber mensagens via requisi√ß√£o POST para a API local (ex: http://localhost:8002/chat)

Exemplo de payload enviado:

json
Copiar
Editar
{
  "messages": [
    {"role": "system", "content": "Voc√™ √© um assistente da Cl√≠nica Ortomolecular. Responda pacientes com educa√ß√£o, clareza e conhecimento sobre sa√∫de ortomolecular."},
    {"role": "user", "content": "Quais hor√°rios est√£o dispon√≠veis esta semana?"}
  ],
  "model": "gpt-4",
  "temperature": 0.7
}
Interface:
P√°gina web com:

Campo de digita√ß√£o para o paciente

Lista de mensagens estilo chat (frontend simples com AJAX ou fetch)

Respostas em tempo real

Armazenamento das conversas no banco de dados

‚öôÔ∏è 8. Requisitos T√©cnicos
Framework: Django (Python 3.x)

Banco de dados: SQLite (compat√≠vel com Replit)

Templates: Django Templates + Bootstrap

Gera√ß√£o de PDF: WeasyPrint ou xhtml2pdf

Integra√ß√£o com APIs locais via requests.post para:

Envio de mensagens (WhatsApp/email)

Comunica√ß√£o com IA (chatbot)

Interface responsiva e modular

C√≥digo limpo e estruturado por apps (pacientes, consultas, prescricoes, financeiro, chatbot etc.)